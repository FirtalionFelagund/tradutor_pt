# Seq2Seq Tradutor: Português - Tupi

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Etapa 1: Carregando os pares extraídos do dicionário
path_dados = '339887506-Dicionario-Guarani-Tupi-Tupi-Antigo-Portugues.txt'
with open(path_dados, 'r', encoding='utf-8') as f:
    linhas = f.readlines()

pares = [linha.strip().split('\t') for linha in linhas if '\t' in linha and len(linha.strip().split('\t')) == 2]

# Separar origem e destino
portugues, tupi = zip(*pares)

# Etapa 2: Pré-processamento
# Adicionando tokens de início e fim
portugues = ['\t ' + frase + ' \n' for frase in portugues]
tupi = ['\t ' + frase + ' \n' for frase in tupi]

# Criar vocabulários
input_vocab = sorted(set(''.join(portugues)))
target_vocab = sorted(set(''.join(tupi)))

input_token_index = {char: i for i, char in enumerate(input_vocab)}
target_token_index = {char: i for i, char in enumerate(target_vocab)}

reverse_target_char_index = {i: char for char, i in target_token_index.items()}

max_encoder_seq_length = max([len(txt) for txt in portugues])
max_decoder_seq_length = max([len(txt) for txt in tupi])

# Vetorização
encoder_input_data = np.zeros((len(portugues), max_encoder_seq_length, len(input_vocab)), dtype='float32')
decoder_input_data = np.zeros((len(tupi), max_decoder_seq_length, len(target_vocab)), dtype='float32')
decoder_target_data = np.zeros((len(tupi), max_decoder_seq_length, len(target_vocab)), dtype='float32')

for i, (input_text, target_text) in enumerate(zip(portugues, tupi)):
    for t, char in enumerate(input_text):
        encoder_input_data[i, t, input_token_index[char]] = 1.
    for t, char in enumerate(target_text):
        decoder_input_data[i, t, target_token_index[char]] = 1.
        if t > 0:
            decoder_target_data[i, t - 1, target_token_index[char]] = 1.

# Etapa 3: Definir o modelo
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, Dense

latent_dim = 256

# Encoder
encoder_inputs = Input(shape=(None, len(input_vocab)))
encoder = LSTM(latent_dim, return_state=True)
encoder_outputs, state_h, state_c = encoder(encoder_inputs)
encoder_states = [state_h, state_c]

# Decoder
decoder_inputs = Input(shape=(None, len(target_vocab)))
decoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)
decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)
decoder_dense = Dense(len(target_vocab), activation='softmax')
decoder_outputs = decoder_dense(decoder_outputs)

model = Model([encoder_inputs, decoder_inputs], decoder_outputs)

# Etapa 4: Treinamento
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(
    [encoder_input_data, decoder_input_data],
    decoder_target_data,
    batch_size=64,
    epochs=100,
    validation_split=0.2
)

# Etapa 5: Inference models
encoder_model = Model(encoder_inputs, encoder_states)

decoder_state_input_h = Input(shape=(latent_dim,))
decoder_state_input_c = Input(shape=(latent_dim,))
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]

decoder_outputs, state_h, state_c = decoder_lstm(
    decoder_inputs, initial_state=decoder_states_inputs)
decoder_states = [state_h, state_c]
decoder_outputs = decoder_dense(decoder_outputs)

decoder_model = Model(
    [decoder_inputs] + decoder_states_inputs,
    [decoder_outputs] + decoder_states
)

# Função de decodificação
def decode_sequence(input_seq):
    states_value = encoder_model.predict(input_seq)
    
    target_seq = np.zeros((1, 1, len(target_vocab)))
    target_seq[0, 0, target_token_index['\t']] = 1.

    stop_condition = False
    decoded_sentence = ''
    while not stop_condition:
        output_tokens, h, c = decoder_model.predict(
            [target_seq] + states_value)

        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_char = reverse_target_char_index[sampled_token_index]
        decoded_sentence += sampled_char

        if sampled_char == '\n' or len(decoded_sentence) > max_decoder_seq_length:
            stop_condition = True

        target_seq = np.zeros((1, 1, len(target_vocab)))
        target_seq[0, 0, sampled_token_index] = 1.

        states_value = [h, c]

    return decoded_sentence

# Exemplo de uso
for seq_index in range(5):
    input_seq = encoder_input_data[seq_index: seq_index + 1]
    decoded_sentence = decode_sequence(input_seq)
    print('-')
    print('Entrada:', portugues[seq_index])
    print('Tradução:', decoded_sentence.strip())
